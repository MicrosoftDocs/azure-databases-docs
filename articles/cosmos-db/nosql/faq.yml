### YamlMime:FAQ
metadata:
  title: Frequently asked questions
  titleSuffix: Azure Cosmos DB for NoSQL
  description: Get answers to frequently asked questions about Azure Cosmos DB for NoSQL.
  author: markjbrown
  ms.author: mjbrown
  ms.service: azure-cosmos-db
  ms.subservice: nosql
  ms.topic: faq
  ms.date: 10/01/2024
title: Frequently asked questions about Azure Cosmos DB for NoSQL
summary: |
  [!INCLUDE[NoSQL](../includes/appliesto-nosql.md)]
sections:
  - name: General
    questions:
      - question: |
          How do I start developing against Azure Cosmos DB for NoSQL?
        answer: |
          First you must sign up for an Azure subscription. Once you sign up for an Azure subscription, you can add an API for NoSQL container to your Azure subscription.
          
          [Software development kits (SDKs)](sdk-dotnet-v2.md) are available for .NET, Python, Node.js, JavaScript, Go, and Java. Developers can also use the [REST API](/rest/api/cosmos-db/) to interact with Azure Cosmos DB resources from more platforms and languages.
      - question: |
          Is there Azure Cosmos DB for NoSQL samples to get started?
        answer: |
          Check out these QuickStart code samples and templates for the API for NoSQL:

          - [.NET](quickstart-dotnet.md)
          - [Python](quickstart-python.md)
          - [Node.js/JavaScript](quickstart-nodejs.md)
          - [Java/Spring](quickstart-java.md)
          - [Go](quickstart-go.md)
      - question: |
          Does Azure Cosmos DB for NoSQL support schema-free data?
        answer: |
          Yes, the API for NoSQL allows applications to store arbitrary JSON documents as items without schema definitions or hints. The data is immediately available for query with the Azure Cosmos DB for NoSQL query language.
      - question: |
          Does Azure Cosmos DB for NoSQL support ACID (atomicity, consistency, isolation, durability) transactions?
        answer: |
          Yes, the API for NoSQL supports cross-document transactions expressed using either batches in the SDKs or as JavaScript-stored procedures and triggers. Transactions are scoped to a single partition within each container and executed with ACID semantics as "all or nothing," isolated from other concurrently executing code and user requests. If exceptions occur, the entire transaction is rolled back.
      - question: |
          How do I create an Azure Cosmos DB for NoSQL database?
        answer: |
          You can create databases by using one of these tools:
          
          - [Azure portal](quickstart-portal.md#)
          - API for NoSQL client (data-plane) SDKs
            - [.NET](quickstart-dotnet.md)
            - [Python](quickstart-python.md)
            - [JavaScript](quickstart-nodejs.md)
            - [Java](quickstart-java.md)
            - [Go](quickstart-go.md)
          - API for NoSQL management (control-plane) SDKs
            - [.NET](/dotnet/api/overview/azure/resourcemanager.cosmosdb-readme)
            - [Python](/python/api/overview/azure/mgmt-cosmosdb-readme)
            - [JavaScript](/javascript/api/overview/azure/arm-cosmosdb-readme)
            - [Java](/java/api/overview/azure/resourcemanager-cosmos-readme)
            - [Go](https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cosmos/armcosmos)
          - Azure Resource Manager
            - [JSON template](/azure/templates/microsoft.documentdb/databaseaccounts?pivots=deployment-language-bicep)
            - [Bicep](/azure/templates/microsoft.documentdb/databaseaccounts?pivots=deployment-language-arm-template)
            - [Terraform](/azure/templates/microsoft.documentdb/databaseaccounts?pivots=deployment-language-terraform)
          - [REST API](/rest/api/cosmos-db/)
      - question: |
          Can I authenticate to Azure Cosmos DB for NoSQL using my existing Microsoft Entra ID accounts?
        answer:
          Yes! Azure Cosmos DB supports Microsoft Entra authentication to manage the service and its resources (control-plane) and to execute data, operations, and queries (data-plane).

          Control-plane authentication is performed using the [role-based access control]() feature of Azure. You can use a preconfigured built-in role](../../role-based-access-control/built-in-roles.md) or you can [create a custom role](/azure/role-based-access-control/custom-roles). With Azure role-based access control, you can manage accounts, databases, containers, and metadata. The control-plane includes operations including, but not limited to these examples.

          - Creating, replacing, or deleting databases
          - Creating, replacing, or deleting containers
          - Reading or replacing database throughput
          - Reading or replacing container throughput

          Data-plane authentication uses a custom API for NoSQL-native role-based access control implementation. With this native implementation, you can also use preconfigured or custom roles. With native role-based access control, you can execute queries, manage items, or perform other common operations. The data-plane includes operations including, but not limited to these examples.

          - Creating, replacing, updating, or deleting items
          - Patching items
          - Executing queries
      - question: |
          Does Azure Cosmos DB for NoSQL support the SQL query language?
        answer: |
          Structured Query Language (SQL) is a language typically used to query relational data. The API for NoSQL has a custom **NoSQL** query language derived from SQL. The NoSQL query language includes a subset of the SQL query language typically associated with SQL Server along with various NoSQL-specific enhancements. The NoSQL query language provides rich hierarchical and relational operators and extensibility via JavaScript-based, user-defined functions (UDFs). JSON grammar allows for modeling JSON documents as trees with labeled nodes, which are used by both the Azure Cosmos DB automatic indexing techniques and the SQL query dialect of Azure Cosmos DB. For information about using this query language, see [NoSQL Query](query/index.yml).
      - question: |
          Does Azure Cosmos DB for NoSQL support SQL aggregation functions?
        answer: |
          The API for NoSQL supports aggregation via aggregate functions such as: `COUNT`, `MAX`, `AVG`, and `SUM` via the NoSQL query language.
      - question: |
          How does Azure Cosmos DB for NoSQL provide concurrency?
        answer: |
          The API for NoSQL supports optimistic concurrency control (OCC) through HTTP entity tags, or **ETags**. Every API for NoSQL resource has an ETag, and the ETag is set on the server every time a document is updated. The ETag header and the current value are included in all response messages. ETags can be used with the `If-Match` header to allow the server to decide whether a resource should be updated. The If-Match value is the ETag value to be checked against. If the ETag value matches the server ETag value, the resource is updated. If the ETag is no longer current, the server rejects the operation with an "HTTP 412 Precondition failure" response code. The client then refetches the resource to acquire the current ETag value for the resource. In addition, ETags can be used with the `If-None-Match` header to determine whether its needed to refetch a resource.
          
          Most of the API for NoSQL SDKs includes classes to manage optimistic concurrency control.
      - question: |
          How can I bulk-insert documents into Azure Cosmos DB for NoSQL?
        answer: |
          Use the bulk import feature in the [.NET SDK](tutorial-dotnet-bulk-import.md) or the [Java SDK](bulk-executor-java.md) for the API for NoSQL to import large sets of data. This feature optimizes provisioned throughput to import large sets of data.

          Alternatively, use [Apache Spark](tutorial-spark-connector.md) to import data at scale using Python or Scala.
      - question: |
          Does Azure Cosmos DB for NoSQL support resource link caching?
        answer: |
          Yes, because Azure Cosmos DB for NoSQL is a RESTful service, resource links are immutable and can be cached. API for NoSQL clients can specify an "If-None-Match" header for reads against any resource-like document or container and then update their local copies after the server version changes.
      - question: |
          Is a local instance of Azure Cosmos DB for NoSQL available?
        answer: |
          Yes. The [Azure Cosmos DB emulator](../emulator.md) provides a high-fidelity emulation of the Azure Cosmos DB service. It supports functionality that's identical to Azure Cosmos DB across various APIs. This functionality includes support for creating items, querying items, provisioning containers, and scaling containers. You can develop and test applications by using the emulator's endpoints. You can then deploy the applications to Azure at a global scale by changing the connection string from the emulator to the live service.
      - question: |
          Why are long floating-point values in an Azure Cosmos DB for NoSQL item rounded when using the Data Explorer in the portal?
        answer: |
          This Data Explorer limitation is a limitation of JavaScript. JavaScript uses double-precision floating-point format numbers as specified in Institute of Electrical and Electronics Engineers (IEEE) 754. This data type can safely hold numbers between -(2<sup>53</sup> - 1) and 2<sup>53</sup>-1 (that is, 9007199254740991) only.
  - name: Security
    questions:
      - question: |
          What is role-based access control (RBAC)?
        answer: |
          Role-based access control (RBAC) is a method of regulating access to computer or network resources based on the roles of individual users within an enterprise. In Azure Cosmos DB, RBAC is used to grant data-plane access to users and applications. For more information about various terms in role-based access control, see the [security glossary](security/glossary.md).
      - question: |
          How do I enable data-plane role-based access control for Azure Cosmos DB for NoSQL?
        answer: |
          Use the Azure Cosmos DB native role-based access control (RBAC) feature to grant data-plane access to users and applications. For more information, see [Grant data-plane role-based access](security/how-to-grant-data-plane-role-based-access.md).  
      - question: |
          Which Azure Cosmos DB APIs support data-plane role-based access control?
        answer: |
          As of now, only the NoSQL API is supported.
      - question: |
          Is it possible to manage role definitions and role assignments from the Azure portal?
        answer: |
          Azure portal support for role management isn't available yet.
      - question: |
          Which SDKs in Azure Cosmos DB API for NoSQL support role-based access control?
        answer: |
          The .NET V3, Java V4, JavaScript V3, and Python V4.3+ SDKs are currently supported.
      - question: |
          Is the Microsoft Entra token automatically refreshed by the Azure Cosmos DB SDKs when it expires?
        answer: |
          Yes.
      - question: |
          Is it possible to disable the usage of the account primary/secondary keys when using role-based access control?
        answer: |
          Yes. For more information, see [disable key-based authentication](security/how-to-disable-key-based-authentication.md).
additionalContent: |
  ## Related content

  - [Get started with Azure Cosmos DB for NoSQL and .NET](quickstart-dotnet.md)
  - [Get started with Azure Cosmos DB for NoSQL and Python](quickstart-python.md)
  - [Get started with Azure Cosmos DB for NoSQL and Node.js](quickstart-nodejs.md)
  - [Get started with Azure Cosmos DB for NoSQL and Java](quickstart-java.md)
  - [Get started with Azure Cosmos DB for NoSQL and Go](quickstart-go.md)

  - [Get started with Azure Cosmos DB for NoSQL using the Azure portal](quickstart-portal.md)
  - [Get started with Azure Cosmos DB for NoSQL using Bicep](quickstart-template-bicep.md)
  - [Get started with Azure Cosmos DB for NoSQL using Azure Resource Manager (ARM) templates](quickstart-template-json.md)
  - [Get started with Azure Cosmos DB for NoSQL using Terraform](quickstart-terraform.md)

  ## Next step

  > [!div class="nextstepaction"]
  > [Frequently asked questions about Azure Cosmos DB](../faq.yml)
